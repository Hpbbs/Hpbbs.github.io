---
layout: post
title: 读书思考-编程语言关注的点-C++ 程序语言设计 by Bjarne Stroustrup
categories: [ComputerScience, Book]
---

One programming Language meta-conception concerned

### 关注的模型

内存模型 计算模型 错误处理模型
抽象机制： COM模型，数据抽象 泛型编程

标准库（快速上手 tools kit）：容器算法（功能化的 数据类型） 并发/使用功能

### 是否要

直接高效的 硬件模型 轻量级抽象工具

如何变得优雅的 ：优雅模型《----值得去升入思考： **优雅模型**、

### cpp的两个重要基本原则

1. 不给比Cpp更底层的语言留任何余地
2. 不使用他，就不要为他付出任何代价（零开销原则）


### 要明确 编程语言的 特性集合（程序设计的风格）

在 面向对象编程 函数式编程 响应式编程 众多的概念的当下， 明确如何拆解不同编程风格？ 前述的几个概念是否是最小的集合

请不要将单个语言特性作为解决方案来看待，而应该将其看作一个多变的特性集合，我们可以组合多个特性来表达解决方案

Cpp就是 很多 程序设计技术 的大集合，使用其中的几项组合来完成一个特定的解决方案

### 我要明确的是

无论是哪一种 程序设计技术还是说范性，其本质是一种思维工具，重点在于思维
就像是 我们可以用c这个语言工具 + 面向对象的编程思想 写出很好的 面向对象的程序一样
函数式 响应式 都是一个思维

最好的方式，是语言的一些 符号概念 能够帮助这些 思维在代码上表达的落实 才应该是正道，而不仅仅是 C++程序设计语言书中提到（上文的一些摘录）是特性的集合，而应该升级为：符号概念辅助思维表达的 集合

Bjarne将 范性 应该改为 技术，但我想将 范性/技术 改为思维+语言工具（符号）辅助表达

### 编程语言 概念的实现

1. 编程语言的 实现 包含了很多工程的折中


### 并发设计？

进程 线程的概念 是 程序独立执行上下文 表达
其本质应该是在对 cpu执行权限的 虚拟化，1虚拟化为n，一个cpu 虚拟化为 n个执行上下文


### cpp摘录

1. 不存在完美的编程语言，但是好的工具不需要是完美的
2. 我编写Cpp并指定标准，我花大量的时间来倾听用户的意见
3. C++开始编写于1979年秋天，当时名字是带类的c（和我编写的proto-c，原型连思想的c，我是否在尝试重复Cpp？）